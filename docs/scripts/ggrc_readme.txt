Утилита для слияния глобальных графов
ggrc.pl v.0.7


Кратко о сути. Чтобы подключить локацию в какую-нибудь версию сталкера необходимо наличие xrAI для этой версии
и исходники ВСЕХ локаций, которые подключаются в сингл. При отсутствии исходников придется возиться с декомпиляцией
уровней с последующей их компиляцией. При отсутствии xrAI - пролетаем полностью. Разберемся, что делает xrAI:
1) компилит АИ-сетку из исходников, формирует локальный граф уровня.
2) соединяет локальные графы в глобальный граф и формирует кросс-таблицы.
3) соединяет спавны локаций в один.

Казалось бы, если нет xrAI - можно опустить руки. С другой стороны, аи-сетки и кросс-таблицы в скомпиленных
локациях уже есть. Есть и глобальный граф, куда включены локации. Таким образом, в теории подключение 
сингл-локаций без исходников к какой-либо версии сталкера подразумевает под собой следующие действия:
1) Совмещение глобальных графов.
2) Правка ресурсных файлов уровней, если их версия отлична от версии игры, к которой происходит подключение.
Список таких файлов:
	-level.gct.
	-level.ai.
	-level, level.cform, level.geom/geomx (если работать с билдами ранее 2201)
	-level.graph (ряд билдов вроде как требует его наличия)
3) Всякие мелкие дела, вроде копирования недостающих ресурсов, совмещения материалов, шейдеров и партиклов.

Нетрудно догадаться, что подключение локаций вручную требует долгого времени и прекрасное знание форматов 
глобального графа и ресурсных файлов. Данная утилитка призвана облегчить этот процесс.
Что она делает:
	-перемещает графы локаций из одного глобального графа в другой. Также может удалить из дополняемого
графа любые локации, если нужно.
	-правит level.ai, level.gct, level
	-генерирует level.graph, если его в ресурсных файлах нет.
Также присутствует дополнительный функционал для удобства - создание аи-переходов и распаковка графа.


Использование:
----------------------------------------------------
--------------СОВМЕЩЕНИЕ ГРАФОВ---------------------
----------------------------------------------------


1) Кладете программу (ggrc.pl и папку stkutils) в корень геймдаты, в папке levels которой есть все нужные локации.
2) кидаете глобальный граф, из которого будете переносить локации, туда же - в корень геймдаты. Напомню, 
глобальный граф в ТЧ и ранее - это файлик game.graph, в ЧН и позднее он называется section4.bin и находится 
в all.spawn. Чтобы его достать, распакуйте all.spawn с помощью acdc.
3) Делаете батник для сборки (ниже есть пример), запускаете. Если батник составлен правильно, заработает скрипт, 
который будет вас информировать о ходе работы всякими буковками. Работать может долго, вплоть до нескольких
минут, так что ждите. Совет - не работайте со скриптом на флешке, ждать придется оооочень долго.
4) На выходе получите:
	-в корне геймдаты результирующий граф - game.graph.new
	-в папках уровней файлы level.gct, level.ai, level, level.graph. Кстати, если переносите локи в ЧН или ЗП - 
level.gct НЕ появится. Это нормально.
5) переименовываете game.graph.new в game.graph (ну или в section4.bin, если родительский граф у вас от ЗП), 

Чтобы добавить подключенные локации в спавн, в all.ltx распакованного спавна в секции [alife_objects] 
добавляете alife_локация.ltx от ваших локаций. Еще поменяйте level_count в секции [header] на значение 
согласно получившегося графа.

		Главное, не трогайте больше ничего в [header]!

Ну вот и все. Можно запускать игру, ловить вылеты по недостающим текстурам и т.д. и т.п.
		
Синтаксис батника:
ggrc.pl [-g1 <имя_графа,номер_билда>] [-l1 <список уровней>] [-g2 <имя_графа,номер_билда>] [-l2 <список уровней>] 
[-rscan]

Значения параметров:
-g1 <имя_графа,ключ_билда> - родительский граф, т.е. от того билда, к которому вы планируете присоединить локации.
указывается в формате: game.graph,1935. Список ключей смотрите ниже. 
-l1 <список уровней> - список уровней, которые хотите оставить в родительском графе, через запятую (без пробелов!)
-g2 <имя_графа,ключ_билда> - дочерний граф, т.е. от того билда, откуда берете локации.
указывается в формате: game.graph,1935. Список ключей смотрите ниже. 
-l2 <список уровней> - список уровней, которые хотите взять из дочернего графа, через запятую (без пробелов!)
-rscan - при указании этого ключа скрипт прочитает текстуры, шейдеры и материалы, необходимые
для подключаемых локаций, и сравнит их с присутствующими в геймдате. При отсутствии запишет имя недостающего
в файл res.log.

!!!Внимание! Уровни указывать в том же порядке, в каком они идут в гейм.графе!

!!!Для совмещения графов БОЛЬШЕ НИКАКИХ КЛЮЧЕЙ НЕ УКАЗЫВАТЬ!

Пример: ggrc.pl -g1 game.graph,soc -l1 l01_escape,l02_garbage -g2 section4.bin,cop -l2 zaton,pripyat

Не будет лишним заметить, что имена уровней надо указывать ТОЧНО ТАКЖЕ, как они записаны в глобальном графе.
Если не уверены в именах - распакуйте граф и посмотрите.

------------------------------------------------------------
--------------------РАСПАКОВКА ГРАФА------------------------
------------------------------------------------------------

Использовать просто. Кладете граф в папку с программой, запускаете батник для распаковки.

Команда:
ggrc.pl [-g1 <имя_графа,номер_билда>] [-o <output_file>] [-l] [-i] [-g] [-rct]


-g1 <имя_графа,ключ_билда> - граф для распаковки
-o <output_file> - файл вывода результатов. Указывать расширение!
-l - декомпиляция level.graph. Из-за неправильного заголовка при декомпиляции level.graph от 1475,1510 неверно 
определяется edge_count (начиная с 1834 все нормально). Ориентируйтесь на число секций edge.
-g - выводит список уровней, отсортированных по гейм_вертексу, в отдельный файл guids.txt. Для билдов старше 1849 
(24 февраля 2004) также выводятся связи между уровнями. Если не указан - список будет выведен в консоль.
-i - игнорирование левел-поинтов при чтении и выводе. Существенно ускоряет работу программы, советую использовать.
У билдов младше 1472 (включая) левел-поинты в game.graph не содержатся, указывать ключ не надо.
-rct - читать и выводить кросс-таблицы (для ЧН, ЗП). Лучше не пользовать, кросс-таблицы оооочень большие,
читаются долго, а практического толку от них ноль.

Для распаковки графа БОЛЬШЕ НИКАКИХ КЛЮЧЕЙ НЕ УКАЗЫВАТЬ!

Пример: ggrc.pl -g1 game.graph,2215 -o links.txt -g -i

------------------------------------------------------------
--------------------ДОБАВЛЕНИЕ АИ-ПЕРЕХОДОВ-----------------
------------------------------------------------------------

АИ-переходы необходимы для оффлайн-навигации неписей между разными локациями. Выбираете два вертекса, 
один на одной локации, второй на другой, соединяете связью - переход для непися готов.

Команда:
ggrc.pl [-g1 <имя_графа,номер_билда>] [-ai <vertex1,vertex2>]

-g1 <имя_графа,ключ_билда> - граф для добавления переходов
-ai <vert1,vert2> - соединяемые вертексы, через запятую (без пробелов!).

Пример: ggrc.pl -g1 game.graph,2215 -ai 14,134

На выходе получите файл типа game.graph.new_edge. Это геймграф с готовыми переходами.

Больше ключей не нужно.

-------------------------------------------------------------
Ключи билдов:
1469 - билд 1469
1472 - билд 1472
1510 - билды с датой компиляции от июня 2003 (1475) по первую половину августа 2004 (1902)
1935 - билды с датой компиляции от второй половины августа 2004 (1911) по февраль 2005 (2201)
2215 - билды с датой компиляции от апреля 2005 (2203) по декабрь 2005 (2365)
soc - билды с датой компиляции от начала 2006 по билд 3120.
cop - от ЧН и выше.

-------------------------------------------------------------

История версий:

v.0.7	[+] добавлена правка level.geom/level.geomx при переносе локаций в билды/из билдов
	[+] включена коррекция вертексов в кросс-таблицах родительского графа
	[+] добавлено сканирование шейдеров, текстур и материалов, используемых подключаемыми локациями и вывод 
отсутствующих в лог.

v.0.6	[+] добавлена коррекция вертексов в кросс-таблицах. 
	[+] добавлена правка версии xrLC в level при переносе локаций в билды/из билдов.

v.0.5	[+] тестово добавлена поддержка билдов 1834-2201.
	[i] пофиксен ряд багов, 

v.0.4	[i] отключено чтение неизменяемых файлов (родительские level.ai, level.gct, дочерние level.ai, если
версии графов одинаковы)

v.0.3	[+] включена возможность добавления аи-переходов между локациями.

v.0.2	[+] включено восстановление level.graph по game.graph (работает для всех версий, начниная по крайней мере 
с 2005 года - более ранние пока не проверял, теоретически тоже должны корректно восстанавливаться).
	[i] немного изменен алгоритм коррекции game_vertex_id у связей. 

v.0.1 	[+] реализован основной функционал (совмещение графов, обновление кросс-таблиц и аи-сетки)
--------------------------------------------------------------
Авторство:
Исходный код распаковки графа финалки ТЧ - bardak (огромное ему спасибо)
Все остальное - K.D.