Утилита для слияния глобальных графов
ggrc.pl v.0.3

Использование:
----------------------------------------------------
--------------СОВМЕЩЕНИЕ ГРАФОВ---------------------
----------------------------------------------------

1) Собираете в gamedata/levels/ все уровни, которые вы хотите объединить. Ну или хотя бы положите туда
нужные файлы - level.gct и level.ai. У ЧН и ЗП уровни не имеют файлов level.gct, класть не надо.
2) Кладете в корень геймдаты (где лежит game.graph) нужные game.graph и/или section4.bin 
(тоже геймграф, только от ЧН/ЗП. Запакован в all.spawn, ищите там).
3) Делаете нужный батник для сборки, запускаете. Если батник составлен правильно, заработает скрипт, который будет
вас информировать о ходе работы всякими буковками. В данной версии чтение/запись level.ai работает медленно, 
терпите.
4) На выходе получите:
	-в корне геймдаты результирующий граф - game.graph.new
	-в папках уровней файлы level.gct и level.ai.new. Если файла level.ai.new нету, значит, в level.ai ничего 
не надо было было править, берете level.ai
5) переименовываете game.graph.new в game.graph (ну или в section4.bin, если родительский граф у вас от ЗП), 
level.ai.new в level.ai и запускаете с ними игру. Чтобы добавить подключенные локации в спавн, в all.ltx 
распакованного спавна в секции [alife_objects] добавляете alife_локация.ltx от ваших локаций. Еще поменяйте
level_count в секции [header] на значение согласно получившегося графа.

		Главное, не трогайте больше ничего в [header]!
		
Команда:
ggrc.pl [-g1 <имя_графа,номер_билда>] [-l1 <список уровней>] [-g2 <имя_графа,номер_билда>] [-l2 <список уровней>] 

Значения параметров:
-g1 <имя_графа,ключ_билда> - родительский граф, т.е. от того билда, к которому вы планируете присоединить локации.
указывается в формате: game.graph,1935. Список ключей смотрите ниже. 
-l1 <список уровней> - список уровней, которые хотите оставить в родительском графе, через запятую (без пробелов!)
-g2 <имя_графа,ключ_билда> - дочерний граф, т.е. от того билда, откуда берете локации.
указывается в формате: game.graph,1935. Список ключей смотрите ниже. 
-l2 <список уровней> - список уровней, которые хотите взять из дочернего графа, через запятую (без пробелов!)

!!!Внимание! Уровни указывать в том же порядке, в каком они идут в гейм.графе!

!!!Для совмещения графов БОЛЬШЕ НИКАКИХ КЛЮЧЕЙ НЕ УКАЗЫВАТЬ!

Пример: ggrc.pl -g1 game.graph,soc -l1 l01_escape,l02_garbage -g2 section4.bin,cop -l2 zaton,pripyat

Замечание: таким образом можно подключать локации к финальным версиям сталкера или к билдам не старше 2006 года. 
Причина проста - для работы локации в билдах 22xx, например, требуется корректный level_sectors.ai и правка level.
Генерация level_sectors.ai пока не реализована.
------------------------------------------------------------
--------------------РАСПАКОВКА ГРАФА------------------------
------------------------------------------------------------

Также поддерживается распаковка графа от любого билда. Функционал аналогичен ggtool.pl.
Использовать просто. Кладете граф в папку с программой, запускаете батник для распаковки.

Команда:
ggrc.pl [-g1 <имя_графа,номер_билда>] [-o <output_file>] [-l] [-i] [-g] [-rct]


-g1 <имя_графа,ключ_билда> - граф для распаковки
-o <output_file> - файл вывода результатов. Указывать расширение!
-l - декомпиляция level.graph. Из-за неправильного заголовка при декомпиляции level.graph от 1475,1510 неверно 
определяется edge_count (начиная с 1834 все нормально). Ориентируйтесь на число секций edge.
-g - выводит список уровней, отсортированных по гейм_вертексу, в отдельный файл guids.txt. Для билдов старше 1849 
(24 февраля 2004) также выводятся связи между уровнями.
-i - игнорирование левел-поинтов. Существенно ускоряет работу программы. 
У билдов младше 1472 (включая) левел-поинты в game.graph не содержатся, указывать ключ не надо.
-rct - читать и выводить кросс-таблицы (для ЧН, ЗП). Лучше не пользовать, кросс-таблицы оооочень большие,
читаются долго, а практического толку от них ноль.

Для распаковки графа БОЛЬШЕ НИКАКИХ КЛЮЧЕЙ НЕ УКАЗЫВАТЬ!

Пример: ggrc.pl -g1 game.graph,2215 -o links.txt -g -i

------------------------------------------------------------
--------------------ДОБАВЛЕНИЕ АИ-ПЕРЕХОДОВ-----------------
------------------------------------------------------------

АИ-переходы необходимы для оффлайн-навигации неписей между разными локациями. Выбираете два вертекса, 
один на одной локации, второй на другой, соединяете связью - переход для непися готов.

Команда:
ggrc.pl [-g1 <имя_графа,номер_билда>] [-ai <vertex1,vertex2>]

-g1 <имя_графа,ключ_билда> - граф для добавления переходов
-ai <vert1,vert2> - соединяемые вертексы, через запятую (без пробелов!).

Пример: ggrc.pl -g1 game.graph,2215 -ai 14,134

На выходе получите файл типа game.graph.new_edge. Это геймграф с готовыми переходами.

Больше ключей не нужно.

-------------------------------------------------------------
Ключи билдов:
1469 - билд 1469
1472 - билд 1472
1510 - билды с датой компиляции от июня 2003 (1475) по первую половину августа 2004 (1902)
1935 - билды с датой компиляции от второй половины августа 2004 (1911) по февраль 2005 (2201)
2215 - билды с датой компиляции от апреля 2005 (2203) по декабрь 2005 (2365)
SOC - билды с датой компиляции от начала 2006 по билд 3120.
COP - от ЧН и выше.

-------------------------------------------------------------

История версий:

v.0.4 - отключено чтение неизменяемых файлов (родительские level.ai, level.gct, дочерние level.ai, если
версии графов одинаковы)

v.0.3 - включена возможность добавления аи-переходов между локациями.

v.0.2 - включено восстановление level.graph по game.graph (работает для всех версий, начниная по крайней мере 
с 2005 года - более ранние пока не проверял, теоретически тоже должны корректно восстанавливаться).
Немного изменен алгоритм коррекции game_vertex_id у связей. 

v.0.1 - реализован основной функционал (совмещение графов, обновление кросс-таблиц и аи-сетки)
--------------------------------------------------------------
Авторство:
Исходный код распаковки графа финалки ТЧ - bardak (огромное ему спасибо)
Все остальное - K.D.