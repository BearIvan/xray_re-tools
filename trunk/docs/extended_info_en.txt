Interesting information from bardak posts about engine, maps compilation, SOC to CS conversion and vice versa.

Question:

Geometry in stalker, is "fuflo" connected with lods?

Answer:

In stalker (in game, not in editor) there are 2 sets of geometry -- visuals and cform. In first set includes all visible static geometry, including mu-models.

In second set -- invisible geometry for collision calculation. In technical view this sets can be very different. of course, on practise is used only one source.

To where every triagle of created in le map will go determines by settings of compiler shader. collision flag setted -- in cform, 'rendering' setted -- in visuals.

both setted -- we can see object and get stuck on it.

Example collision-only object -- invisible walls around map. Visible, but not sensitive(tangible) -- masked grid. its understandable that interaction with

cform-geometry don't limited by possibility of stuck in it. Player can get radiation sickness (materials\death dont remember) or rustle by leaves (materials\bush and etc).

So the last one is fuflo. with lods, if to be more specific -- with "planer" backgrounds, how i already explained, this has no connection at all. but 2 exceptions, when

applying geometry determined by game material: ladders (comes to level.spawn/all.spawn) and partitionable geometry (to there plus external .ogf)

Question:

What is MU-models? Levels of detail in X-ray.

Answer:

MU-models (ingame) -- this is static objects of map with regulated close to "planer" backs level of detalization.

They stored in level.geom like onetime setted standart geometry and number of position places (matrix + coordinates structure 

for background). Such scheme help to save memory and provides execution of requipments D_TREE-shaders concern to origin

of coordinates. purpose is transparent: trees/bushes must shake from wind, and not random, but from the ground. Because of that

original models (.objects) of big vegetation always grow from origin of coordinates.

About levels of detail. X-ray uses algorithm smooth changing detailing of geometry (if more concretic -- sliding window progressive meshes),

i mean on this stage of compilation for MU-models calculates (more concretic look about qslim) and saves (in compact view)

all simplified models. when drawing it chooses most relevant variant or planer background at all (that is level_lods.dds).

Its all concerns of modern builds. in something like 1114/1154 MU-models wasn't at all and in 1935 was only backgrounds.

for skeletron models (OGF) smooth detailing also possible and used much. but without billboard's of course.

Question:

From what composed .object and how it connected with sectors?

Answer:

File .object consist from meshes. in maya terminology -- its shape. during export from maya every shape will have correspond mesh.

Term shape in stalker (in game and in sdk) is used also in skeletron models and in spawn-objects like space_restrictor and etc,

its not connected at all with sectors/portals. I mean sector#0000Shape its just name of mesh, automaticly setted by decompiler. It means

that this mesh is first (0000) part of sector with name "sector". hypotetic mesh with name sector_0008#0007Shape will mean that its seven (0007)

piece of sector with name "sector_0008". names of meshes inessential. this is just algorithm of naming in decompiler.

Question:

How sectors and portals works in stalker and for what are they?

Answer:

Sectors/portals and HOM needed only to improve performance. Principle of s/p work i think is clear: scene divided on some number of volumes(sectors),

we set windows(portals), from which (and only from which) observer can see what inside other sectors.

Red area -- portals, geometry of different sectors colored differently, you should look LE settings.

Divide is making in LE (half)automaticly on conditition that you have prepared geometry. what that means is easy to understand by looking any decompiled map

with key "-mode raw" (choose big one like mp_bath).

also option: mp_atp from soc sdk. its enough to replace files sector.part and portal.part to their backup-copies (sector.~part and portal.~part accordingly).

HOM -- free from s/p mechanism. Again, example can be any decompiled map, just try to minimize number of triagles in HOM-object, simultaneously maximize

covered square by it. For example y have no any need in copy cut of hill, its enough rough approximation (look junk hills on garbage). For landscape HOM

can't be done any other way, manually only, and for buildings make sense to try build-in maya tool 'rough of geometry'. how to be sure HOM is good for your map?

Let's say by recording flyby demo of map and test it with level.hom or without. 

Question:

Is it nessesary to prepare separate geometry?

Answer:

No. Important only form of geometry organization. If 2 connected rooms with passage need to be in different sectors, than it needs: 

1) place them to different meshes (in maya -- in different shapes);

2) provide easy junction of geometry (portal -- 3(triagle),4(quadrangle),5,6-gon). hower LE can also eats very complicated junctions, but i'm not sure in this.  

about room in mp_bath, its very hard to say why its not separated sector. LE creates sectors based on geometry, when decompiler on the contrary,

exports .objects based on information about sectors.

Question:

What about using xrlc CS for building SOC maps?

Answer:

xrlc-CS can be used for building soc maps.

1) carefully adapt gamedata-soc such way, that le-cs likes it (weather and other small things).

2) make hardlink's for .thm from $textures$ to $game_textures$ (or just copy).

3) load map to le-cs, prepare for build, then xrlc-cs and xrdo_light-cs.

4) load map to le-soc, build remaning crap.

(tests was done without adding ai-components of course)

addition by macron:

But its possible cs-compilator will create textures of lightmaps not compatitable with SOC in brightness scheme and it will need fixing.

Question:

Why not create cleaner of poligons for invalid faces from decompiled maps?

Answer:

Lets think. we have:

1) compiled map by modern build (2215 and older);

2) known fact, that during compilation xrLC angry with non correct triagles.

Formal conclusion? right, already compilated map hasnt such errors.

Real situation more difficult:

it can be fully messed triagles (their square is 0)

because of nvstrip/nvmender, but like that deleted automaticly and it works.

from where is broken polygons from second compilation? from there: xrLC trying to optimize

geometry and collapsing too close placed vertixes, as the result from "good" triagle appears "bad".

next, why we cant stupidly delete bad poligons at all automaticly and this should do a designer?

better to explain on example of escape from 1114/1154. decompile, load it into LE, import

list of errors from logs\\converter_escape1154.err and imagine that all brighted poligons will be removed.

Question:

Exported geometry of Stalker ripped by kasper plugin to SDK, luggy, why?

Answer:

Speed of work and load LE depends from how broken is geometry, so can be setted such rules:

1) more meshes in objects, slower its work.

2) more triagles in single mesh and more compilicated its form, slower loading of LE map.

3) number of separrated .object effects low on speed of work.

Key "-mode maya" originally was done for loading geometry into maya. so then creating one .object,

but lots of meshes, what is comfortable for working in maya (later usefull for max-plugin). however

before export all this meshes mix should be united in logical groups (buildings, earth and etc) for

more quicker work of LE.

Question:

Transfer SOC into CS, CS into SOC and something like. How to do?

Answer:

About transfer from soc to cs (fully). instruction for 3120:

1) fix XR_3DA.exe into 3120 such way (so it can work with .dbN from rus version)

; replace SEED0_WW to SEED0_RU
0x000e90d4: 0x4b -> 0x36
0x000e90d5: 0xbc -> 0x94
0x000e90d6: 0x5b -> 0x32
0x000e90d7: 0x00 -> 0x01

; replace SEED_WW to SEED_RU
0x000e9154: 0xeb -> 0xd3
0x000e9155: 0xb2 -> 0xa9
0x000e9156: 0x6e -> 0x31
0x000e9157: 0x01 -> 0x01

; replace SIZE_MULT_WW to SIZE_MULT_RU
0x0000fedc: 0x04 -> 0x08

2) aiwrapper -upgrade 3120. on out -- "tree" with all.spawn and level.ai.

3) correct fsgame.ltx (config -> configs and something else).

4) correct weather, something in configs\ui -- understandable from crashes. 

5) replace some .ogf/.omf (crows, humans -- will be understandable from crashes). 

its minium for launching.

for transfering to final CS, instead 1) y need to repack archives, then "aiwrapper -upgrade 3456" 

and lots of work with scripts, config files and models.

for partial transfering maps from SOC to CS, apperantly, needed decompile of them all, fix AI-components,

merge new game.graph and do -upgrade. how to save smart_covers - no idea. transfering maps from CS to SOC --

-- same excluded last 2 actions.

Update 7.09.08:

And additional about transfer from SOC to CS (3502, not 3120). all.spawn, which will be generated after

"aiwrapper -upgrade -3502", need to unpack one time with command "acdc_cs.pl -d all.spawn -o aaa -w -l".

Then -w dont needed, only -l. its minium, in reality there are lots of things to do.

Question:

After transfering SOC to 3120 engine unvulnerable NPC. how to fix?

Answer:

Look function invlulnerable(). write to xr_logic.script accordingly. After that it will need to

replace .omf for humans to avoid crash. And also add grenades in xml-profiles of npc.

Wrote bardak, builded, translated loxotron.